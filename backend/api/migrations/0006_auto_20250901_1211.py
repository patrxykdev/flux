# Generated by Django 4.2.23 on 2025-09-01 12:11

from django.db import migrations, models
from django.contrib.auth.models import User


def check_duplicate_emails(apps, schema_editor):
    """
    Check for duplicate emails before applying the unique constraint.
    """
    # Get all users with duplicate emails
    from django.db.models import Count
    duplicate_emails = User.objects.values('email').annotate(
        count=Count('email')
    ).filter(count__gt=1)
    
    if duplicate_emails.exists():
        duplicate_list = [item['email'] for item in duplicate_emails]
        raise Exception(
            f"Cannot apply unique constraint: Found duplicate emails: {duplicate_list}. "
            f"Please resolve these duplicates before running this migration."
        )


def reverse_check_duplicate_emails(apps, schema_editor):
    """
    Reverse operation - nothing to do.
    """
    pass


class Migration(migrations.Migration):

    dependencies = [
        ('api', '0005_userprofile_tier'),
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.RunPython(check_duplicate_emails, reverse_check_duplicate_emails),
        migrations.RunSQL(
            "ALTER TABLE auth_user ADD CONSTRAINT auth_user_email_unique UNIQUE (email);",
            reverse_sql="ALTER TABLE auth_user DROP CONSTRAINT IF EXISTS auth_user_email_unique;"
        ),
    ]
